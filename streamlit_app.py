# -*- coding: utf-8 -*-
"""streamlit_app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HezOaSkEhs5kepRz57UJHmBGYrRuJbfg
"""

import streamlit as st
import pandas as pd
import joblib
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.metrics import accuracy_score, recall_score, precision_score, f1_score, classification_report
from imblearn.over_sampling import SMOTE

# Load the trained model and encoders
model = joblib.load('best_model.pkl')
label_encoder = joblib.load('label_encoder.pkl')
ohe = joblib.load('one_hot_encoder.pkl')

# Placeholder function for preprocessing
def preprocess_data(data):
    # Drop 'Surname' column if present
    if 'Surname' in data.columns:
        data = data.drop(['Surname'], axis=1)

    # Convert 'Gender' and 'Geography' columns to category type
    for col in ['Gender', 'Geography']:
        if col in data.columns:
            data[col] = data[col].astype('category')

    # Apply Label Encoding to 'Gender' column
    if 'Gender' in data.columns:
        data['Gender'] = label_encoder.transform(data['Gender'].astype(str))

    # One-hot encode 'Geography' column
    if 'Geography' in data.columns:
        # Ensure consistent feature names for one-hot encoding
        expected_feature_names = ['Geography_France', 'Geography_Germany', 'Geography_Spain']
        geo_encoded = pd.DataFrame(ohe.transform(data[['Geography']]), columns=expected_feature_names)
        data = pd.concat([data.drop('Geography', axis=1), geo_encoded], axis=1)

    return data

# Define the Streamlit app
def main():
    st.title('Customer Churn Prediction using Machine Learning')

    # File upload section
    st.sidebar.header('Upload CSV File')
    uploaded_file = st.sidebar.file_uploader("Choose a CSV file", type="csv")

    if uploaded_file is not None:
        # Read the uploaded CSV file
        data = pd.read_csv(uploaded_file)

        # Display the uploaded data
        st.subheader('Uploaded Data:')
        st.write(data)

        # Preprocess the data
        preprocessed_data = preprocess_data(data.copy())

        # Apply SMOTE preprocessing
        smote = SMOTE(random_state=42)
        X_resampled, y_resampled = smote.fit_resample(preprocessed_data.drop('Exited', axis=1), preprocessed_data['Exited'])
        data_resampled = pd.concat([X_resampled, y_resampled], axis=1)

        # Make predictions
        predictions = model.predict(data_resampled.drop('Exited', axis=1))

        # Append predictions to the original dataset
        data_resampled['Predictions'] = predictions

        # Display the updated dataset with predictions
        st.subheader('Data with Predictions:')
        st.write(data_resampled)

        # If you have the true labels in the data, you can evaluate the model
        if 'Exited' in data_resampled.columns:
            y_true = data_resampled['Exited']
            y_pred = predictions

if __name__ == '__main__':
    main()